# Spring Boot 3 AWS S3文件上传服务配置
# 
# 此配置文件演示了如何配置AWS S3相关参数。
# 
# 配置优先级说明：
# 1. 环境变量具有最高优先级（推荐用于生产环境）
# 2. 此配置文件中的值作为默认值或开发环境配置
# 3. 某些配置项如果在环境变量和配置文件中都未设置，将使用代码中的默认值

# Spring Boot 基础配置
spring:
  application:
    name: s3-upload-service
  
  # Spring Boot 3 新特性：原生编译支持
  aot:
    enabled: false
  
  # Jackson JSON 配置
  jackson:
    default-property-inclusion: non_null
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Shanghai

# 服务器配置
server:
  port: 8080
  servlet:
    context-path: /
  
  # 文件上传限制配置（Spring Boot 处理的上传限制）
  # 注意：我们使用Base64编码传输，所以这些限制主要影响其他上传方式
  tomcat:
    max-http-form-post-size: 50MB
    max-swallow-size: 50MB

# Spring Boot 多部分文件上传配置
spring:
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
      enabled: true

# AWS S3 配置
# 
# 重要提示：
# 1. 生产环境中，建议使用环境变量而不是配置文件来设置敏感信息
# 2. 环境变量名称映射：
#    aws.s3.access-key -> AWS_S3_ACCESS_KEY
#    aws.s3.secret-key -> AWS_S3_SECRET_KEY  
#    aws.s3.region -> AWS_S3_REGION
#    aws.s3.bucket-name -> AWS_S3_BUCKET_NAME
#    aws.s3.endpoint-url -> AWS_S3_ENDPOINT_URL
#    aws.s3.path-style-access -> AWS_S3_PATH_STYLE_ACCESS
aws:
  s3:
    # AWS访问密钥ID
    # 环境变量：AWS_S3_ACCESS_KEY
    # 生产环境请使用环境变量，不要在配置文件中硬编码
    access-key: ${AWS_S3_ACCESS_KEY:your-access-key-here}
    
    # AWS秘密访问密钥  
    # 环境变量：AWS_S3_SECRET_KEY
    # 生产环境请使用环境变量，不要在配置文件中硬编码
    secret-key: ${AWS_S3_SECRET_KEY:your-secret-key-here}
    
    # AWS区域
    # 环境变量：AWS_S3_REGION
    # 常用区域：us-east-1, us-west-2, eu-west-1, ap-northeast-1, ap-southeast-1
    region: ${AWS_S3_REGION:us-east-1}
    
    # S3存储桶名称
    # 环境变量：AWS_S3_BUCKET_NAME
    # 存储桶名称必须全局唯一，只能包含小写字母、数字和连字符
    bucket-name: ${AWS_S3_BUCKET_NAME:your-bucket-name}
    
    # 自定义S3终端点URL（可选）
    # 环境变量：AWS_S3_ENDPOINT_URL
    # 用于连接S3兼容的存储服务（如MinIO、阿里云OSS等）
    # 留空则使用标准AWS S3服务
    endpoint-url: ${AWS_S3_ENDPOINT_URL:}
    
    # 是否使用路径样式访问（可选）
    # 环境变量：AWS_S3_PATH_STYLE_ACCESS
    # true: 使用路径样式 (http://endpoint/bucket/key)
    # false: 使用虚拟主机样式 (http://bucket.endpoint/key)
    # MinIO等服务通常需要设置为true
    path-style-access: ${AWS_S3_PATH_STYLE_ACCESS:false}
    
    # 连接超时时间（毫秒）
    # 默认30秒，可根据网络环境调整
    connection-timeout: 30000
    
    # 读取超时时间（毫秒）
    # 默认60秒，可根据文件大小和网络环境调整
    read-timeout: 60000

# 日志配置
logging:
  level:
    # 应用程序日志级别
    com.example.s3upload: INFO
    
    # AWS SDK 日志级别（调试时可以设置为DEBUG）
    software.amazon.awssdk: INFO
    
    # Spring Boot 核心日志级别
    org.springframework: INFO
    
    # 根日志级别
    root: INFO
  
  # 日志输出格式
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  
  # 日志文件配置（可选）
  file:
    name: logs/s3-upload-service.log
    max-size: 50MB
    max-history: 30

# 管理端点配置（Spring Boot Actuator）
# 用于健康检查和监控
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true

# 应用程序信息
info:
  app:
    name: S3 Upload Service
    description: AWS S3文件上传演示服务
    version: 1.0.0
    encoding: UTF-8
    java:
      version: 17
  
  # 构建信息（Maven会自动填充）
  build:
    artifact: s3-upload-demo
    group: com.example
    version: 1.0.0-SNAPSHOT

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev

# 开发环境下的特殊配置
logging:
  level:
    com.example.s3upload: DEBUG
    software.amazon.awssdk: DEBUG

# 开发环境的S3配置示例
aws:
  s3:
    # 开发环境可以使用本地MinIO进行测试
    endpoint-url: http://localhost:9000
    path-style-access: true
    access-key: minioadmin
    secret-key: minioadmin
    bucket-name: test-bucket
    region: us-east-1

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod

# 生产环境下的特殊配置
logging:
  level:
    root: WARN
    com.example.s3upload: INFO

# 生产环境安全提示：
# 1. 所有AWS凭据都应该通过环境变量设置
# 2. 不要在配置文件中包含任何敏感信息
# 3. 考虑使用AWS IAM角色而不是访问密钥
# 4. 启用S3存储桶的版本控制和访问日志
# 5. 配置适当的CORS策略 